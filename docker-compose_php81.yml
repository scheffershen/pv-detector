version: '3.6'

services:
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1080:8025"
    networks:
      - backend 
  # node:
    # image: node:14.17.3
    # container_name: node
    # working_dir: /var/www/html
    # volumes:
    #    - ./:/var/www/html
    # tty: true  
    # networks:
    #    - backend       
  # php:
    #build: docker/php
    # image: scheffer_shen/php74vb:latest
    # container_name: php
    # env_file:
    #   - .env
    # working_dir: /var/www/html
    # volumes:
    #   - "./:/var/www/html"
    # networks:
    #   - backend 
  php8:
    #build: 
      # context: docker/php81
      # args: 
      #   - LARADOCK_PHP_VERSION=8.1
      #   - INSTALL_XSL=false
      #   - INSTALL_PHPREDIS=true
      #   - INSTALL_AMQP=true
      #   - INSTALL_BCMATH=true
      #   - INSTALL_OPCACHE=true
      #   - INSTALL_MYSQLI=true
      #   - INSTALL_TOKENIZER=true
      #   - INSTALL_INTL=true
      #   - INSTALL_GHOSTSCRIPT=true
      #   - INSTALL_LDAP=true
      #   - INSTALL_IMAGEMAGICK=true
      #   - INSTALL_CALENDAR=true
      #   - INSTALL_APCU=true
    image: scheffer_shen/php81:latest
    container_name: php8
    user: '1000:1000'
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
    networks:
        - backend 
  caddy:
    image: caddy:2
    container_name: caddy
    environment:
      SERVER_NAME: ${SERVER_NAME:-pv_detector.local, caddy:80}
    ports:
      - 80:80
      - 443:443
    working_dir: /var/www/html
    volumes:
      - "./public:/var/www/html/public"
      - "./docker/caddy/Caddyfile:/etc/caddy/Caddyfile:ro"
      - "./docker/.data/caddy/data:/data"
      - "./docker/.data/caddy/config:/config"
    networks:
      - backend       
      - frontend      
  # db:
    # image: mysql:5.7
    # container_name: db
    # command: --default-authentication-plugin=mysql_native_password
    # command: mysqld --default-authentication-plugin=mysql_native_password
    # command: [mysqld, --default-authentication-plugin=mysql_native_password, --character-set-server=utf8mb4, --collation-server=utf8mb4_unicode_ci, --innodb_monitor_enable=all, --max-connections=1001]
    # ports:
    #  - 3306:3306
    # environment:
    #   MYSQL_ROOT_PASSWORD: 9TT4fgq5
    # volumes:
    #   - "./docker/.data/db:/var/lib/mysql"
    #   - "./_SQL:/home"
    # networks:
    #   - backend
  db:
    image: mysql:8.0
    container_name: db
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=9TT4fgq5
    volumes: 
      - ./docker/.data/db:/var/lib/mysql
      - ./_SQL:/home
    working_dir: /home
    command: '--default-authentication-plugin=mysql_native_password'
    networks:
        - backend
  redis:
    image: redis:5-alpine
    container_name: redis
    restart: always
    #ports: [6379]
    networks:
      - backend
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:5.2.0
    container_name: phpmyadmin
    restart: always    
    ports:
      - "8080:80"      
    environment:
        PMA_HOST: db
    networks:
      - backend   
      - frontend
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    container_name: elasticsearch
    volumes:
      - ./docker/.data/elasticsearch:/usr/share/elasticsearch/data    
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # 512mo HEAP
      - "ELASTICSEARCH_USERNAME=adminum"
      - "ELASTICSEARCH_PASSWORD=azerty"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    networks:
      - backend
      - frontend
  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.3
    container_name: kibana
    environment:
        ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
        - elasticsearch
    ports:
        - 5601:5601
    networks:
      - backend
      - frontend 
  # python:
  #   image: python:3.9-bullseye
  #   container_name: python
  #   working_dir: /var/www/html
  #   volumes:
  #     - "./:/var/www/html"
  #   networks:
  #     - backend
  #   tty: true
  #   restart: always
  # jupyter:
  #   image: jupyter/minimal-notebook
  #   container_name: jupyter
  #   volumes:
  #     - ./jupyter:/home/jovyan/work
  #     #- ./docker/jupyter/configure_environment.sh:/usr/local/bin/before-notebook.d/configure_environment.sh
  #   ports:
  #     - 8888:8888
  #   environment:       
  #     GRANT_SUDO: yes      
  #   networks:
  #     - backend 
  #     - frontend  

volumes:
  caddy_data:
  caddy_config:

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge      
